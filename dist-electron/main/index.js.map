{"version":3,"file":"index.js","sources":["../../electron/main/index.ts"],"sourcesContent":["import { app, BrowserWindow, shell, ipcMain } from 'electron'\r\nimport { release } from 'os'\r\nimport { dirname, join } from 'path'\r\nimport { fileURLToPath } from 'url'\r\n\r\nconst __filename = fileURLToPath(import.meta.url)\r\nconst __dirname = dirname(__filename)\r\n\r\n// The built directory structure\r\n//\r\n// ├─┬ dist-electron\r\n// │ ├─┬ main\r\n// │ │ └── index.js    > Electron-Main\r\n// │ └─┬ preload\r\n// │   └── index.mjs    > Preload-Scripts\r\n// ├─┬ dist\r\n// │ └── index.html    > Electron-Renderer\r\n//\r\nprocess.env.DIST_ELECTRON = join(__dirname, '../')\r\nprocess.env.DIST = join(process.env.DIST_ELECTRON, '../dist')\r\nprocess.env.VITE_PUBLIC = process.env.VITE_DEV_SERVER_URL\r\n    ? join(process.env.DIST_ELECTRON, '../public')\r\n    : process.env.DIST\r\n\r\n// Disable GPU Acceleration for Windows 7\r\nif (release().startsWith('6.1')) app.disableHardwareAcceleration()\r\n\r\n// Set application name for Windows 10+ notifications\r\nif (process.platform === 'win32') app.setAppUserModelId(app.getName())\r\n\r\nif (!app.requestSingleInstanceLock()) {\r\n    app.quit()\r\n    process.exit(0)\r\n}\r\n\r\n// Remove electron security warnings\r\n// This warning only shows in development mode\r\n// Read more on https://www.electronjs.org/docs/latest/tutorial/security\r\n// process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true'\r\n\r\nlet win: BrowserWindow | null = null\r\n// Here, you can also use other preload\r\nconst preload = join(__dirname, '../preload/index.mjs')\r\nconst url = process.env.VITE_DEV_SERVER_URL\r\nconst indexHtml = join(process.env.DIST, 'index.html')\r\n\r\nasync function createWindow() {\r\n    win = new BrowserWindow({\r\n        title: 'Main window',\r\n        icon: join(process.env.VITE_PUBLIC, 'favicon.ico'),\r\n        webPreferences: {\r\n            preload,\r\n            // Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\r\n            // nodeIntegration: true,\r\n\r\n            // Consider using contextBridge.exposeInMainWorld\r\n            // Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\r\n            // contextIsolation: false,\r\n        },\r\n    })\r\n\r\n    if (url) { // electron-vite-vue#298\r\n        win.loadURL(url)\r\n        // Open devTool if the app is not packaged\r\n        win.webContents.openDevTools()\r\n    } else {\r\n        win.loadFile(indexHtml)\r\n    }\r\n\r\n    // Test actively push message to the Electron-Renderer\r\n    win.webContents.on('did-finish-load', () => {\r\n        win?.webContents.send('main-process-message', new Date().toLocaleString())\r\n    })\r\n\r\n    // Make all links open with the browser, not with the application\r\n    win.webContents.setWindowOpenHandler(({ url }) => {\r\n        if (url.startsWith('https:')) shell.openExternal(url)\r\n        return { action: 'deny' }\r\n    })\r\n\r\n    // Apply electron-updater\r\n    // update(win)\r\n}\r\n\r\napp.whenReady().then(createWindow)\r\n\r\napp.on('window-all-closed', () => {\r\n    win = null\r\n    if (process.platform !== 'darwin') app.quit()\r\n})\r\n\r\napp.on('second-instance', () => {\r\n    if (win) {\r\n        // Focus on the main window if the user tried to open another\r\n        if (win.isMinimized()) win.restore()\r\n        win.focus()\r\n    }\r\n})\r\n\r\napp.on('activate', () => {\r\n    const allWindows = BrowserWindow.getAllWindows()\r\n    if (allWindows.length) {\r\n        allWindows[0].focus()\r\n    } else {\r\n        createWindow()\r\n    }\r\n})\r\n\r\n// New window example arg: new windows url\r\nipcMain.handle('open-win', (_, arg) => {\r\n    const childWindow = new BrowserWindow({\r\n        webPreferences: {\r\n            preload,\r\n            nodeIntegration: true,\r\n            contextIsolation: false,\r\n        },\r\n    })\r\n\r\n    if (process.env.VITE_DEV_SERVER_URL) {\r\n        childWindow.loadURL(`${url}#${arg}`)\r\n    } else {\r\n        childWindow.loadFile(indexHtml, { hash: arg })\r\n    }\r\n})"],"names":["__filename","fileURLToPath","__dirname","dirname","join","release","app","BrowserWindow","url","shell","ipcMain"],"mappings":";;;;;;AAKA,MAAMA,eAAaC,MAAAA,cAAc,OAAA,aAAA,cAAA,QAAA,KAAA,EAAA,cAAA,UAAA,EAAA,OAAA,0BAAA,uBAAA,OAAA,IAAA,IAAA,YAAA,SAAA,OAAA,EAAA,IAAe;AAChD,MAAMC,cAAYC,KAAAA,QAAQH,YAAU;AAYpC,QAAQ,IAAI,gBAAgBI,KAAK,KAAAF,aAAW,KAAK;AACjD,QAAQ,IAAI,OAAOE,KAAA,KAAK,QAAQ,IAAI,eAAe,SAAS;AAC5D,QAAQ,IAAI,cAAc,QAAQ,IAAI,sBAChCA,KAAA,KAAK,QAAQ,IAAI,eAAe,WAAW,IAC3C,QAAQ,IAAI;AAGlB,IAAIC,WAAU,EAAA,WAAW,KAAK;AAAGC,WAAA,IAAI,4BAA4B;AAGjE,IAAI,QAAQ,aAAa;AAAaA,WAAAA,IAAA,kBAAkBA,aAAI,QAAS,CAAA;AAErE,IAAI,CAACA,SAAAA,IAAI,6BAA6B;AAClCA,WAAA,IAAI,KAAK;AACT,UAAQ,KAAK,CAAC;AAClB;AAOA,IAAI,MAA4B;AAEhC,MAAM,UAAUF,KAAK,KAAAF,aAAW,sBAAsB;AACtD,MAAM,MAAM,QAAQ,IAAI;AACxB,MAAM,YAAYE,KAAA,KAAK,QAAQ,IAAI,MAAM,YAAY;AAErD,eAAe,eAAe;AAC1B,QAAM,IAAIG,SAAAA,cAAc;AAAA,IACpB,OAAO;AAAA,IACP,MAAMH,KAAAA,KAAK,QAAQ,IAAI,aAAa,aAAa;AAAA,IACjD,gBAAgB;AAAA,MACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOJ;AAAA,EAAA,CACH;AAED,MAAI,KAAK;AACL,QAAI,QAAQ,GAAG;AAEf,QAAI,YAAY;EAAa,OAC1B;AACH,QAAI,SAAS,SAAS;AAAA,EAC1B;AAGI,MAAA,YAAY,GAAG,mBAAmB,MAAM;AACxC,+BAAK,YAAY,KAAK,6CAA4B,KAAK,GAAE;EAAgB,CAC5E;AAGD,MAAI,YAAY,qBAAqB,CAAC,EAAE,KAAAI,WAAU;AAC1CA,QAAAA,KAAI,WAAW,QAAQ;AAAGC,qBAAM,aAAaD,IAAG;AAC7C,WAAA,EAAE,QAAQ;EAAO,CAC3B;AAIL;AAEAF,SAAI,IAAA,UAAY,EAAA,KAAK,YAAY;AAEjCA,SAAAA,IAAI,GAAG,qBAAqB,MAAM;AACxB,QAAA;AACN,MAAI,QAAQ,aAAa;AAAUA,aAAA,IAAI,KAAK;AAChD,CAAC;AAEDA,SAAAA,IAAI,GAAG,mBAAmB,MAAM;AAC5B,MAAI,KAAK;AAEL,QAAI,IAAI,YAAY;AAAG,UAAI,QAAQ;AACnC,QAAI,MAAM;AAAA,EACd;AACJ,CAAC;AAEDA,SAAAA,IAAI,GAAG,YAAY,MAAM;AACf,QAAA,aAAaC,uBAAc;AACjC,MAAI,WAAW,QAAQ;AACR,eAAA,CAAC,EAAE;EAAM,OACjB;AACU;EACjB;AACJ,CAAC;AAGDG,SAAA,QAAQ,OAAO,YAAY,CAAC,GAAG,QAAQ;AAC7B,QAAA,cAAc,IAAIH,uBAAc;AAAA,IAClC,gBAAgB;AAAA,MACZ;AAAA,MACA,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IACtB;AAAA,EAAA,CACH;AAEG,MAAA,QAAQ,IAAI,qBAAqB;AACjC,gBAAY,QAAQ,GAAG,GAAG,IAAI,GAAG,EAAE;AAAA,EAAA,OAChC;AACH,gBAAY,SAAS,WAAW,EAAE,MAAM,IAAK,CAAA;AAAA,EACjD;AACJ,CAAC;"}